name: PR size labeler

on:
  pull_request:
    types: [opened, reopened, synchronize]

jobs:
  pr-size:
    runs-on: ubuntu-latest
    outputs:
      prsize: ${{ steps.get_diff.outputs.size }}
    steps:
      - name: Get PR diff
        id: get_diff
        run: |
          pr_number=${{ github.event.pull_request.number }}
          pr_diff=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -H "Accept: application/vnd.github.diff" "https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}")
          pr_size=$(echo "$pr_diff" | grep "^[+-]" | grep -v "+++" | wc -l)
          echo "size=$pr_size" >> $GITHUB_OUTPUT
      - name: Select label
        id: select_label
        run: |
          pr_size=${{ steps.get_diff.outputs.size }}
          label=""
          color=""
          description=""
          if [[ $pr_size -gt 999 ]]; then
            label="size/XL"
            color="c32607"
            description="Denotes a PR that changes 1000+ lines, ignoring generated files."
          elif [[ $pr_size -gt 499 ]]; then
            label="size/L"
            color="a14c05"
            description="Denotes a PR that changes 500-999 lines, ignoring generated files."
          elif [[ $pr_size -gt 99 ]]; then
            label="size/M"
            color="7f7203"
            description="Denotes a PR that changes 100-499 lines, ignoring generated files."
          elif [[ $pr_size -gt 9 ]]; then
            label="size/S"
            color="5d9801"
            description="Denotes a PR that changes 10-99 lines, ignoring generated files."
          else
            label="size/XS"
            color="3cbf00"
            description="Denotes a PR that changes 0-9 lines, ignoring generated files."
          fi
          echo "label=$label" >> $GITHUB_OUTPUT
          echo "color=$color" >> $GITHUB_OUTPUT
          echo "description=$description" >> $GITHUB_OUTPUT
      - name: Check if label has changed
        id: check_if_label_changed
        uses: actions/github-script@v4
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pr_number = context.payload.pull_request.number;
            const existing_labels = await github.issues.listLabelsOnIssue({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr_number
            });
            let has_changed = false;
            const new_label = '${{ steps.select_label.outputs.label }}';
            for (let i = 0; i < existing_labels.data.length; i++) {
              const label = existing_labels.data[i];
              if (label.name.startsWith("size") && JSON.stringify(label.name) !== JSON.stringify(new_label)) {
                has_changed = true;
                core.setOutput("current_label", label.name);
              }
            }
            core.setOutput("has_changed", has_changed);
      - name: Remove Label
        if: ${{ steps.check_if_label_changed.outputs.has_changed == 'true' }}
        uses: actions/github-script@v4
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pr_number = context.payload.pull_request.number;
            const current_label = '${{ steps.check_if_label_changed.outputs.current_label }}';
            const response = await github.issues.removeLabel({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr_number,
              name: [current_label]
            });
      - name: Add Label
        if: ${{ steps.check_if_label_changed.outputs.has_changed == 'true' }} && ${{ steps.check_if_label_changed.outputs.current_label != steps.select_label.outputs.label }}
        uses: actions/github-script@v4
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pr_number = context.payload.pull_request.number;
            const label = '${{ steps.select_label.outputs.label }}';
            const color = '${{ steps.select_label.outputs.color }}';
            const description = '${{ steps.select_label.outputs.description }}';
            // Check if the label already exists
            const existingLabel = await github.issues.getLabel({
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: label
            }).catch(error => {
              if (error.status === 404) {
                // Label doesn't exist, create a new one
                return github.issues.createLabel({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  name: label,
                  color: color,
                  description: description
                });
              } else {
                // Other error occurred, handle as needed
                throw error;
              }
            });
            // Add the label to the issue/PR
            await github.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr_number,
              labels: [label]
            });
